/**
 * 在ES6中，新增了一个Proxy类，用于帮助我们创建一个代理
 * - 我们希望监听一个对象的相关操作，可以先创建一个代理对象（Proxy对象）
 * - 之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作
 */

/**
 * const p = new Proxy(target, handler) // 监听的对象 处理对象
 *  - 上述target参数为授权方，也就是要使用Proxy包装的目标对象
 *      - 目标对象：可以是任何类型的对象，包括：原生数组、函数、甚至另一个代理
 *      - 我们需要new Proxy对象，并且传入需要侦听的对象以及一个处理对象，可以称之为handler
 */

const obj = {
  name: "xiaoyu",
  age: 20,
};

//1.创建一个Proxy对象，Proxy对象是一个类，所以使用new创建
const objProxy = new Proxy(obj, {
  //代理obj
});

// 注意：之后的操作都是直接对Proxy的操作，而不是原有的对象，
// 对Proxy的操作，需要使用到第二个参数 handler，通常handler被称为处理对象；

// 在handler中，有众多的捕获器，用来捕捉 查找，改动这个变化过程的一些时机
// 不同捕获器针对于不同的时机具备不同的作用；
